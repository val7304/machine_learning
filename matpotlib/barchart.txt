import requests
import json
import matplotlib.pyplot as plt
import numpy as np

service = []
cov = []
new_cov=[]

r=requests.get("https://webgate.ec.europa.eu/devcc-sonarqube/api/components/tree?component=Compass_Corproate&ps=500",auth=('4be8658483e54041a05fe86c4c9be0daa3cd3659',''))
jr= json.loads(r.text)

for y in jr["components"]:
    pkey=y["refKey"]
   
    if not(pkey.endswith("-UI")) and not(pkey.endswith("-ui")):
        all  = pkey
        name=y["name"]
        
        if name not in service:
            service.append(name)
            service.sort()
        
    # for n in range(len(service)):
        # print("n vaut", n, "et service[n] vaut", service[n])
        
        metricKeys = ["coverage", "new_coverage"]
            
        for i in range(len(metricKeys)):
            url_1 = "https://webgate.ec.europa.eu/devcc-sonarqube/api/measures/component?component="+pkey.rstrip()+"&metricKeys="+metricKeys[i]+"&"
            r=requests.get(url_1,auth=('4be8658483e54041a05fe86c4c9be0daa3cd3659',''))
            jpr=json.loads(r.text)
                
            if len(jpr["component"]["measures"])==0:
                    coverage="no value"
                    # cov.append(0)
                    # new_cov.append(0)
            else:
            
            #     # while len(service) > len(cov) and len(service) > len(new_cov):
                for c in jpr["component"]["measures"]:
                    # print(c["metric"])
                    # print(c)
                    if c["metric"]==metricKeys[0]:
                       cov.append(c["value"])
                    else: 
                        cov.append(0)
                        
                    if c["metric"]==metricKeys[1]:
                        new_cov.append(c["period"]["value"])
                    else: 
                        new_cov.append(0)
                        
                # if c == 0: 
                #     coverage="no value"
                #     cov.append(0)
                #     new_cov.append(0)
                # else: 
                    
                #     if jpr["component"]["measures"][0]["metric"]==metricKeys[0]:
                #         cov.append(c["value"])
                #     #     cov.append(float(c["component"]["measures"][0]["value"]))
                    
                #     if jpr["component"]["measures"][0]["metric"]==metricKeys[1]:
                #         new_cov.append(c["period"]["value"])
                    
                #    new_cov.append(float(c["component"]["measures"][0]["period"]["value"]))
                    
                        
                    

         
print(len(service))  #134
        
print(len(cov))
print(len(new_cov))

# print(len(cov))
# print(len(new_cov))

# mname = service
# metrics = {
#     'coverage': cov,
#     'new_coverage': new_cov
# }

# x = np.arange(len(service))  # the label locations
# width = 0.25  # the width of the bars
# multiplier = 0

# fig, ax = plt.subplots(layout='constrained')

# for attribute, measurement in metrics.items():
#     offset = width * multiplier
#     rects = ax.bar(x + offset, measurement, width, label=attribute)
#     ax.bar_label(rects, padding=3, rotation=90)
#     multiplier += 1

# # Add some text for labels, title and custom x-axis tick labels, etc.
# ax.set_ylabel('Length (mm)')
# ax.set_title('coverage vs new_coverage')
# ax.set_xticks(x + width, mname, size=8, rotation=90)
# ax.legend(metrics, loc='upper left', ncols=3)
# ax.set_ylim(0, 130)

# plt.show()


